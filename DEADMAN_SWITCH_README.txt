Bitclamp supports a very special deadman switch feature.  Perhaps the best example of what this involves is in the classic 1994 Keanu Reeves movie "Speed" (see http://www.imdb.com/title/tt0111257/).

Here's a more concrete description.  Let's say you have a set of documents that you'd like to use as insurance against being arrested or "falling down the stairs and landing on some bullets."  In that case, you can use Bitclamp to publish the documents in an encrypted archive, but withhold the encryption key.  You would then set up a check-in process that must be completed every (say) 24 hours, otherwise the encryption key is published and the documents become public.

For example, you could send an e-mail to a special address, or click a button on a website.  If this isn't done every 24 hours (because you suddenly went missing), the documents are automatically published to the world.

This check-in process must be created independently; Bitclamp can't help with that part.  It must be secret and unique, otherwise it can be disabled by the bad guys before they go after you.  (Bonus tip: you can create a fake check-in process, or chain multiple processes together for added security.)


Below is an example on how to publish a deadman switch file:

---
python3 bitclamp.py --chain=btc --file=/home/jdog/SEKRUT.zip --txfee 0.0003 --change mhnd4a9CNE3TFDuMRMXVEGaYfkkCwAcFvv --deadman-switch-save=/media/jdog/USB_KEY/dms.key
To begin publication, send 0.00964845 BTC to 2NBoJtgxG7ZzWY8a5CP6kmQkpnqRMMX3MRu
Parsed all TXIDs in block in 0 seconds.
Received funds.  Beginning publication...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...
Sent data block was confirmed.  Sending next block...

Publication complete!  Waiting for the transactions to surpass the confirmation threshold.  This phase is optional.
0 transactions awaiting full confirmation...
All transactions fully confirmed.
---

As you can see, the --deadman-switch-save option indicates that the encryption key for SEKRUT.zip should be withheld and stored in /media/jdog/USB_KEY/dms.key.

Later, if/when its time for SEKRUT.zip to be made public, the following command is used:

---
bitclamp.py --chain=btc --txfee 0.0003 --change mhnd4a9CNE3TFDuMRMXVEGaYfkkCwAcFvv --deadman-switch-publish=/tmp/dms.key
To begin publication, send 0.00045313 BTC to 2MtxPDcMG4gR5PNdenk2C2DCMH3hfnrZkEy
Parsed all TXIDs in block in 0 seconds.
Received funds.  Beginning publication...
Sent data block was confirmed.  Sending next block...

Publication complete!  Waiting for the transactions to surpass the confirmation threshold.  This phase is optional.
0 transactions awaiting full confirmation...
All transactions fully confirmed.
---

Observe that --deadman-switch-publish is used to specify the encryption key that was created in the first step.  Also note that publishing the key is done VERY quickly (in one message to the Bitcoin/Dogecoin network, versus many messages to publish the original archive).

BE SURE THAT YOUR WALLET HAS SUFFICIENT FUNDS TO PUBLISH THE KEY!!  This will be a small amount, but you MUST ensure that it will be available when its go-time!
